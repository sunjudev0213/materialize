$grid-size: 100px;

.grid-5x3,
.grid-5x2,
.grid-5x1,
.grid-4x3,
.grid-4x2,
.grid-4x1,
.grid-3x3,
.grid-3x2,
.grid-3x1,
.grid-2x3,
.grid-2x2,
.grid-2x1,
.grid-1x3,
.grid-1x2,
.grid-1x1 {
  overflow: hidden;
  //debugging
  //border: red 1px solid; @include browser1000 { border: blue 1px solid; } @include browser800{ border: green 1px solid; } @include mobile { border: yellow 1px solid; }
}

// DEBUGGING THE GRID
@mixin grid-debug {
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@mixin grid-6-col {
  display: grid;
  grid-template-rows: $grid-size;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
  grid-gap: 2em 2em; //across, down
}

@mixin grid-5-col {
  display: grid;
  grid-template-rows: $grid-size; //120px; set this as a variable so it can also size content in other classes
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  grid-gap: 2em 2em; //across, down
}

@mixin grid-4-col {
  display: grid;
  grid-template-rows: $grid-size;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-gap: 2em 2em; //across, down
}

@mixin grid-3-col {
  display: grid;
  grid-template-rows: $grid-size;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 2em 2em; //across, down
}

@mixin grid-2-col {
  display: grid;
  grid-template-rows: $grid-size;
  grid-template-columns: 1fr 1fr;
  grid-gap: 2em 2em; //across, down
}

//GRID CONTAINER
.grid-section {
  @include grid-6-col;

  // 1000 px and down drop grid to 4 columns
  @include browser1000 {
    @include grid-4-col;
    //	background-color: blue;
  }

  @include browser800 {
    @include grid-4-col;
    //	background-color: red;
  }

  @include mobile {
    @include grid-2-col;
    //	background-color: yellow;
  }

  margin-bottom: 1em;

  &:last-child {
    border-bottom: none;
  }
}

//6x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.grid-6x3,
.grid-6x2,
.grid-6x1 {
  grid-column: span 6;
  p {
    max-width: 80%;
  }

  img {
    width: 100%;
    height: auto;
  }
  // resize these grid items to span based on new grid size at these breakpoints
  @include browser1000 {
    grid-column: span 4;
  }
  @include browser800 {
    grid-column: span 4;
  }
  @include mobile {
    grid-column: span 2;
  }
}
// rows stay same across breakpoints
.grid-6x3 {
  grid-row: span 3;
}
.grid-6x2 {
  grid-row: span 2;
}
.grid-6x1 {
  grid-row: span 1;
}

//5x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.grid-5x3,
.grid-5x2,
.grid-5x1 {
  grid-column: span 5;
  p {
    max-width: 80%;
  }

  img {
    width: 100%;
    height: auto;
  }
  // resize these grid items to span based on new grid size at these breakpoints
  @include browser1000 {
    grid-column: span 4;
  }
  @include browser800 {
    grid-column: span 3;
  }
  @include mobile {
    grid-column: span 2;
  }
}
// rows stay same across breakpoints
.grid-5x3 {
  grid-row: span 3;
}
.grid-5x2 {
  grid-row: span 2;
}
.grid-5x1 {
  grid-row: span 1;
}

//4x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.grid-4x3,
.grid-4x2,
.grid-4x1 {
  grid-column: span 4;

  // resize these grid items to span based on new grid size at these breakpoints
  @include browser1000 {
    grid-column: span 4;
  }
  @include browser800 {
    grid-column: span 4;
  }
  @include mobile {
    grid-column: span 2;
  }

  img {
    width: 100%;
    height: auto;
  }
}
// rows stay same across breakpoints
.grid-4x3 {
  grid-row: span 3;
}
.grid-4x2 {
  grid-row: span 2;
}
.grid-4x1 {
  grid-row: span 1;
}

//3x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.grid-3x3,
.grid-3x2,
.grid-3x1 {
  grid-column: span 3;

  // resize these grid items to span based on new grid size at these breakpoints
  @include browser1000 {
    grid-column: span 3;
  }
  @include browser800 {
    grid-column: span 3;
  }
  @include mobile {
    grid-column: span 2;
  }

  img {
    width: 100%;
    height: auto;
  }
}
// rows stay same across breakpoints
.grid-3x3 {
  grid-row: span 3;
}
.grid-3x2 {
  grid-row: span 2;
}
.grid-3x1 {
  grid-row: span 1;
}

//2x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.grid-2x3,
.grid-2x2,
.grid-2x1 {
  grid-column: span 2;

  // resize these grid items to span based on new grid size at these breakpoints
  @include browser1000 {
    grid-column: span 2;
  }
  @include browser800 {
    grid-column: span 2;
  }
  @include mobile {
    grid-column: span 2;
  }

  img {
    width: 100%;
    height: auto;
  }
}
// rows stay same across breakpoints
.grid-2x3 {
  grid-row: span 3;
}
.grid-2x2 {
  grid-row: span 2;
}
.grid-2x1 {
  grid-row: span 1;
}

//1x ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.grid-1x3,
.grid-1x2,
.grid-1x1 {
  grid-column: span 1;
  // no resizing, always 1
  @include mobile {
    grid-column: span 2;
  }

  img {
    width: 100%;
    height: auto;
  }
}
// rows stay same across breakpoints
.grid-1x3 {
  grid-row: span 3;
}
.grid-1x2 {
  grid-row: span 2;
}
.grid-1x1 {
  grid-row: span 1;
}

//
.grid-spacer {
  @include mobile {
    display: none;
  }
}
