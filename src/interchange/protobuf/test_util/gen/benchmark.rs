// Copyright Materialize, Inc. All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.
// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `testdata/benchmark.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct Value {
    // message fields
    pub l_orderkey: i32,
    pub l_partkey: i32,
    pub l_suppkey: i32,
    pub l_linenumber: i32,
    pub l_quantity: f64,
    pub l_extendedprice: f64,
    pub l_discount: f64,
    pub l_tax: f64,
    pub l_returnflag: ::std::string::String,
    pub l_linestatus: ::std::string::String,
    pub l_shipdate: i32,
    pub l_commitdate: i32,
    pub l_receiptdate: i32,
    pub l_shipinstruct: ::std::string::String,
    pub l_shipmode: ::std::string::String,
    pub l_comment: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Value {
    fn default() -> &'a Value {
        <Value as ::protobuf::Message>::default_instance()
    }
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    // int32 l_orderkey = 1;


    pub fn get_l_orderkey(&self) -> i32 {
        self.l_orderkey
    }
    pub fn clear_l_orderkey(&mut self) {
        self.l_orderkey = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_orderkey(&mut self, v: i32) {
        self.l_orderkey = v;
    }

    // int32 l_partkey = 2;


    pub fn get_l_partkey(&self) -> i32 {
        self.l_partkey
    }
    pub fn clear_l_partkey(&mut self) {
        self.l_partkey = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_partkey(&mut self, v: i32) {
        self.l_partkey = v;
    }

    // int32 l_suppkey = 3;


    pub fn get_l_suppkey(&self) -> i32 {
        self.l_suppkey
    }
    pub fn clear_l_suppkey(&mut self) {
        self.l_suppkey = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_suppkey(&mut self, v: i32) {
        self.l_suppkey = v;
    }

    // int32 l_linenumber = 4;


    pub fn get_l_linenumber(&self) -> i32 {
        self.l_linenumber
    }
    pub fn clear_l_linenumber(&mut self) {
        self.l_linenumber = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_linenumber(&mut self, v: i32) {
        self.l_linenumber = v;
    }

    // double l_quantity = 5;


    pub fn get_l_quantity(&self) -> f64 {
        self.l_quantity
    }
    pub fn clear_l_quantity(&mut self) {
        self.l_quantity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_l_quantity(&mut self, v: f64) {
        self.l_quantity = v;
    }

    // double l_extendedprice = 6;


    pub fn get_l_extendedprice(&self) -> f64 {
        self.l_extendedprice
    }
    pub fn clear_l_extendedprice(&mut self) {
        self.l_extendedprice = 0.;
    }

    // Param is passed by value, moved
    pub fn set_l_extendedprice(&mut self, v: f64) {
        self.l_extendedprice = v;
    }

    // double l_discount = 7;


    pub fn get_l_discount(&self) -> f64 {
        self.l_discount
    }
    pub fn clear_l_discount(&mut self) {
        self.l_discount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_l_discount(&mut self, v: f64) {
        self.l_discount = v;
    }

    // double l_tax = 8;


    pub fn get_l_tax(&self) -> f64 {
        self.l_tax
    }
    pub fn clear_l_tax(&mut self) {
        self.l_tax = 0.;
    }

    // Param is passed by value, moved
    pub fn set_l_tax(&mut self, v: f64) {
        self.l_tax = v;
    }

    // string l_returnflag = 9;


    pub fn get_l_returnflag(&self) -> &str {
        &self.l_returnflag
    }
    pub fn clear_l_returnflag(&mut self) {
        self.l_returnflag.clear();
    }

    // Param is passed by value, moved
    pub fn set_l_returnflag(&mut self, v: ::std::string::String) {
        self.l_returnflag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_l_returnflag(&mut self) -> &mut ::std::string::String {
        &mut self.l_returnflag
    }

    // Take field
    pub fn take_l_returnflag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.l_returnflag, ::std::string::String::new())
    }

    // string l_linestatus = 10;


    pub fn get_l_linestatus(&self) -> &str {
        &self.l_linestatus
    }
    pub fn clear_l_linestatus(&mut self) {
        self.l_linestatus.clear();
    }

    // Param is passed by value, moved
    pub fn set_l_linestatus(&mut self, v: ::std::string::String) {
        self.l_linestatus = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_l_linestatus(&mut self) -> &mut ::std::string::String {
        &mut self.l_linestatus
    }

    // Take field
    pub fn take_l_linestatus(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.l_linestatus, ::std::string::String::new())
    }

    // int32 l_shipdate = 11;


    pub fn get_l_shipdate(&self) -> i32 {
        self.l_shipdate
    }
    pub fn clear_l_shipdate(&mut self) {
        self.l_shipdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_shipdate(&mut self, v: i32) {
        self.l_shipdate = v;
    }

    // int32 l_commitdate = 12;


    pub fn get_l_commitdate(&self) -> i32 {
        self.l_commitdate
    }
    pub fn clear_l_commitdate(&mut self) {
        self.l_commitdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_commitdate(&mut self, v: i32) {
        self.l_commitdate = v;
    }

    // int32 l_receiptdate = 13;


    pub fn get_l_receiptdate(&self) -> i32 {
        self.l_receiptdate
    }
    pub fn clear_l_receiptdate(&mut self) {
        self.l_receiptdate = 0;
    }

    // Param is passed by value, moved
    pub fn set_l_receiptdate(&mut self, v: i32) {
        self.l_receiptdate = v;
    }

    // string l_shipinstruct = 14;


    pub fn get_l_shipinstruct(&self) -> &str {
        &self.l_shipinstruct
    }
    pub fn clear_l_shipinstruct(&mut self) {
        self.l_shipinstruct.clear();
    }

    // Param is passed by value, moved
    pub fn set_l_shipinstruct(&mut self, v: ::std::string::String) {
        self.l_shipinstruct = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_l_shipinstruct(&mut self) -> &mut ::std::string::String {
        &mut self.l_shipinstruct
    }

    // Take field
    pub fn take_l_shipinstruct(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.l_shipinstruct, ::std::string::String::new())
    }

    // string l_shipmode = 15;


    pub fn get_l_shipmode(&self) -> &str {
        &self.l_shipmode
    }
    pub fn clear_l_shipmode(&mut self) {
        self.l_shipmode.clear();
    }

    // Param is passed by value, moved
    pub fn set_l_shipmode(&mut self, v: ::std::string::String) {
        self.l_shipmode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_l_shipmode(&mut self) -> &mut ::std::string::String {
        &mut self.l_shipmode
    }

    // Take field
    pub fn take_l_shipmode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.l_shipmode, ::std::string::String::new())
    }

    // string l_comment = 16;


    pub fn get_l_comment(&self) -> &str {
        &self.l_comment
    }
    pub fn clear_l_comment(&mut self) {
        self.l_comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_l_comment(&mut self, v: ::std::string::String) {
        self.l_comment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_l_comment(&mut self) -> &mut ::std::string::String {
        &mut self.l_comment
    }

    // Take field
    pub fn take_l_comment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.l_comment, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Value {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_orderkey = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_partkey = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_suppkey = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_linenumber = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.l_quantity = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.l_extendedprice = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.l_discount = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.l_tax = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.l_returnflag)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.l_linestatus)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_shipdate = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_commitdate = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.l_receiptdate = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.l_shipinstruct)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.l_shipmode)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.l_comment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.l_orderkey != 0 {
            my_size += ::protobuf::rt::value_size(1, self.l_orderkey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l_partkey != 0 {
            my_size += ::protobuf::rt::value_size(2, self.l_partkey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l_suppkey != 0 {
            my_size += ::protobuf::rt::value_size(3, self.l_suppkey, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l_linenumber != 0 {
            my_size += ::protobuf::rt::value_size(4, self.l_linenumber, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l_quantity != 0. {
            my_size += 9;
        }
        if self.l_extendedprice != 0. {
            my_size += 9;
        }
        if self.l_discount != 0. {
            my_size += 9;
        }
        if self.l_tax != 0. {
            my_size += 9;
        }
        if !self.l_returnflag.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.l_returnflag);
        }
        if !self.l_linestatus.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.l_linestatus);
        }
        if self.l_shipdate != 0 {
            my_size += ::protobuf::rt::value_size(11, self.l_shipdate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l_commitdate != 0 {
            my_size += ::protobuf::rt::value_size(12, self.l_commitdate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l_receiptdate != 0 {
            my_size += ::protobuf::rt::value_size(13, self.l_receiptdate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.l_shipinstruct.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.l_shipinstruct);
        }
        if !self.l_shipmode.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.l_shipmode);
        }
        if !self.l_comment.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.l_comment);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.l_orderkey != 0 {
            os.write_int32(1, self.l_orderkey)?;
        }
        if self.l_partkey != 0 {
            os.write_int32(2, self.l_partkey)?;
        }
        if self.l_suppkey != 0 {
            os.write_int32(3, self.l_suppkey)?;
        }
        if self.l_linenumber != 0 {
            os.write_int32(4, self.l_linenumber)?;
        }
        if self.l_quantity != 0. {
            os.write_double(5, self.l_quantity)?;
        }
        if self.l_extendedprice != 0. {
            os.write_double(6, self.l_extendedprice)?;
        }
        if self.l_discount != 0. {
            os.write_double(7, self.l_discount)?;
        }
        if self.l_tax != 0. {
            os.write_double(8, self.l_tax)?;
        }
        if !self.l_returnflag.is_empty() {
            os.write_string(9, &self.l_returnflag)?;
        }
        if !self.l_linestatus.is_empty() {
            os.write_string(10, &self.l_linestatus)?;
        }
        if self.l_shipdate != 0 {
            os.write_int32(11, self.l_shipdate)?;
        }
        if self.l_commitdate != 0 {
            os.write_int32(12, self.l_commitdate)?;
        }
        if self.l_receiptdate != 0 {
            os.write_int32(13, self.l_receiptdate)?;
        }
        if !self.l_shipinstruct.is_empty() {
            os.write_string(14, &self.l_shipinstruct)?;
        }
        if !self.l_shipmode.is_empty() {
            os.write_string(15, &self.l_shipmode)?;
        }
        if !self.l_comment.is_empty() {
            os.write_string(16, &self.l_comment)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Value {
        Value::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_orderkey",
                    |m: &Value| { &m.l_orderkey },
                    |m: &mut Value| { &mut m.l_orderkey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_partkey",
                    |m: &Value| { &m.l_partkey },
                    |m: &mut Value| { &mut m.l_partkey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_suppkey",
                    |m: &Value| { &m.l_suppkey },
                    |m: &mut Value| { &mut m.l_suppkey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_linenumber",
                    |m: &Value| { &m.l_linenumber },
                    |m: &mut Value| { &mut m.l_linenumber },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "l_quantity",
                    |m: &Value| { &m.l_quantity },
                    |m: &mut Value| { &mut m.l_quantity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "l_extendedprice",
                    |m: &Value| { &m.l_extendedprice },
                    |m: &mut Value| { &mut m.l_extendedprice },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "l_discount",
                    |m: &Value| { &m.l_discount },
                    |m: &mut Value| { &mut m.l_discount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "l_tax",
                    |m: &Value| { &m.l_tax },
                    |m: &mut Value| { &mut m.l_tax },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "l_returnflag",
                    |m: &Value| { &m.l_returnflag },
                    |m: &mut Value| { &mut m.l_returnflag },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "l_linestatus",
                    |m: &Value| { &m.l_linestatus },
                    |m: &mut Value| { &mut m.l_linestatus },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_shipdate",
                    |m: &Value| { &m.l_shipdate },
                    |m: &mut Value| { &mut m.l_shipdate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_commitdate",
                    |m: &Value| { &m.l_commitdate },
                    |m: &mut Value| { &mut m.l_commitdate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "l_receiptdate",
                    |m: &Value| { &m.l_receiptdate },
                    |m: &mut Value| { &mut m.l_receiptdate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "l_shipinstruct",
                    |m: &Value| { &m.l_shipinstruct },
                    |m: &mut Value| { &mut m.l_shipinstruct },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "l_shipmode",
                    |m: &Value| { &m.l_shipmode },
                    |m: &mut Value| { &mut m.l_shipmode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "l_comment",
                    |m: &Value| { &m.l_comment },
                    |m: &mut Value| { &mut m.l_comment },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Value>(
                    "Value",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Value {
        static mut instance: ::protobuf::lazy::Lazy<Value> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Value,
        };
        unsafe {
            instance.get(Value::new)
        }
    }
}

impl ::protobuf::Clear for Value {
    fn clear(&mut self) {
        self.l_orderkey = 0;
        self.l_partkey = 0;
        self.l_suppkey = 0;
        self.l_linenumber = 0;
        self.l_quantity = 0.;
        self.l_extendedprice = 0.;
        self.l_discount = 0.;
        self.l_tax = 0.;
        self.l_returnflag.clear();
        self.l_linestatus.clear();
        self.l_shipdate = 0;
        self.l_commitdate = 0;
        self.l_receiptdate = 0;
        self.l_shipinstruct.clear();
        self.l_shipmode.clear();
        self.l_comment.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Connector {
    // message fields
    pub version: ::std::string::String,
    pub connector: ::std::string::String,
    pub name: ::std::string::String,
    pub server_id: i64,
    pub ts_sec: i64,
    pub gtid: ::std::string::String,
    pub file: ::std::string::String,
    pub pos: i64,
    pub row: i64,
    pub snapshot: bool,
    pub thread: i64,
    pub db: ::std::string::String,
    pub table: ::std::string::String,
    pub query: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Connector {
    fn default() -> &'a Connector {
        <Connector as ::protobuf::Message>::default_instance()
    }
}

impl Connector {
    pub fn new() -> Connector {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string connector = 2;


    pub fn get_connector(&self) -> &str {
        &self.connector
    }
    pub fn clear_connector(&mut self) {
        self.connector.clear();
    }

    // Param is passed by value, moved
    pub fn set_connector(&mut self, v: ::std::string::String) {
        self.connector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connector(&mut self) -> &mut ::std::string::String {
        &mut self.connector
    }

    // Take field
    pub fn take_connector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.connector, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 server_id = 4;


    pub fn get_server_id(&self) -> i64 {
        self.server_id
    }
    pub fn clear_server_id(&mut self) {
        self.server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_server_id(&mut self, v: i64) {
        self.server_id = v;
    }

    // int64 ts_sec = 5;


    pub fn get_ts_sec(&self) -> i64 {
        self.ts_sec
    }
    pub fn clear_ts_sec(&mut self) {
        self.ts_sec = 0;
    }

    // Param is passed by value, moved
    pub fn set_ts_sec(&mut self, v: i64) {
        self.ts_sec = v;
    }

    // string gtid = 6;


    pub fn get_gtid(&self) -> &str {
        &self.gtid
    }
    pub fn clear_gtid(&mut self) {
        self.gtid.clear();
    }

    // Param is passed by value, moved
    pub fn set_gtid(&mut self, v: ::std::string::String) {
        self.gtid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gtid(&mut self) -> &mut ::std::string::String {
        &mut self.gtid
    }

    // Take field
    pub fn take_gtid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gtid, ::std::string::String::new())
    }

    // string file = 7;


    pub fn get_file(&self) -> &str {
        &self.file
    }
    pub fn clear_file(&mut self) {
        self.file.clear();
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::std::string::String) {
        self.file = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file(&mut self) -> &mut ::std::string::String {
        &mut self.file
    }

    // Take field
    pub fn take_file(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.file, ::std::string::String::new())
    }

    // int64 pos = 8;


    pub fn get_pos(&self) -> i64 {
        self.pos
    }
    pub fn clear_pos(&mut self) {
        self.pos = 0;
    }

    // Param is passed by value, moved
    pub fn set_pos(&mut self, v: i64) {
        self.pos = v;
    }

    // int64 row = 9;


    pub fn get_row(&self) -> i64 {
        self.row
    }
    pub fn clear_row(&mut self) {
        self.row = 0;
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: i64) {
        self.row = v;
    }

    // bool snapshot = 10;


    pub fn get_snapshot(&self) -> bool {
        self.snapshot
    }
    pub fn clear_snapshot(&mut self) {
        self.snapshot = false;
    }

    // Param is passed by value, moved
    pub fn set_snapshot(&mut self, v: bool) {
        self.snapshot = v;
    }

    // int64 thread = 11;


    pub fn get_thread(&self) -> i64 {
        self.thread
    }
    pub fn clear_thread(&mut self) {
        self.thread = 0;
    }

    // Param is passed by value, moved
    pub fn set_thread(&mut self, v: i64) {
        self.thread = v;
    }

    // string db = 12;


    pub fn get_db(&self) -> &str {
        &self.db
    }
    pub fn clear_db(&mut self) {
        self.db.clear();
    }

    // Param is passed by value, moved
    pub fn set_db(&mut self, v: ::std::string::String) {
        self.db = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_db(&mut self) -> &mut ::std::string::String {
        &mut self.db
    }

    // Take field
    pub fn take_db(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.db, ::std::string::String::new())
    }

    // string table = 13;


    pub fn get_table(&self) -> &str {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::std::string::String) {
        self.table = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table(&mut self) -> &mut ::std::string::String {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.table, ::std::string::String::new())
    }

    // string query = 14;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Connector {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.connector)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.server_id = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ts_sec = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gtid)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.file)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pos = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.row = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.snapshot = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.thread = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.db)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.table)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.connector.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.connector);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.server_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ts_sec != 0 {
            my_size += ::protobuf::rt::value_size(5, self.ts_sec, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gtid.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.gtid);
        }
        if !self.file.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.file);
        }
        if self.pos != 0 {
            my_size += ::protobuf::rt::value_size(8, self.pos, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.row != 0 {
            my_size += ::protobuf::rt::value_size(9, self.row, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.snapshot != false {
            my_size += 2;
        }
        if self.thread != 0 {
            my_size += ::protobuf::rt::value_size(11, self.thread, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.db.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.db);
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.table);
        }
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.query);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.connector.is_empty() {
            os.write_string(2, &self.connector)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.server_id != 0 {
            os.write_int64(4, self.server_id)?;
        }
        if self.ts_sec != 0 {
            os.write_int64(5, self.ts_sec)?;
        }
        if !self.gtid.is_empty() {
            os.write_string(6, &self.gtid)?;
        }
        if !self.file.is_empty() {
            os.write_string(7, &self.file)?;
        }
        if self.pos != 0 {
            os.write_int64(8, self.pos)?;
        }
        if self.row != 0 {
            os.write_int64(9, self.row)?;
        }
        if self.snapshot != false {
            os.write_bool(10, self.snapshot)?;
        }
        if self.thread != 0 {
            os.write_int64(11, self.thread)?;
        }
        if !self.db.is_empty() {
            os.write_string(12, &self.db)?;
        }
        if !self.table.is_empty() {
            os.write_string(13, &self.table)?;
        }
        if !self.query.is_empty() {
            os.write_string(14, &self.query)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Connector {
        Connector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &Connector| { &m.version },
                    |m: &mut Connector| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "connector",
                    |m: &Connector| { &m.connector },
                    |m: &mut Connector| { &mut m.connector },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Connector| { &m.name },
                    |m: &mut Connector| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "server_id",
                    |m: &Connector| { &m.server_id },
                    |m: &mut Connector| { &mut m.server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ts_sec",
                    |m: &Connector| { &m.ts_sec },
                    |m: &mut Connector| { &mut m.ts_sec },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gtid",
                    |m: &Connector| { &m.gtid },
                    |m: &mut Connector| { &mut m.gtid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "file",
                    |m: &Connector| { &m.file },
                    |m: &mut Connector| { &mut m.file },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "pos",
                    |m: &Connector| { &m.pos },
                    |m: &mut Connector| { &mut m.pos },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "row",
                    |m: &Connector| { &m.row },
                    |m: &mut Connector| { &mut m.row },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "snapshot",
                    |m: &Connector| { &m.snapshot },
                    |m: &mut Connector| { &mut m.snapshot },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "thread",
                    |m: &Connector| { &m.thread },
                    |m: &mut Connector| { &mut m.thread },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "db",
                    |m: &Connector| { &m.db },
                    |m: &mut Connector| { &mut m.db },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table",
                    |m: &Connector| { &m.table },
                    |m: &mut Connector| { &mut m.table },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query",
                    |m: &Connector| { &m.query },
                    |m: &mut Connector| { &mut m.query },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Connector>(
                    "Connector",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Connector {
        static mut instance: ::protobuf::lazy::Lazy<Connector> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Connector,
        };
        unsafe {
            instance.get(Connector::new)
        }
    }
}

impl ::protobuf::Clear for Connector {
    fn clear(&mut self) {
        self.version.clear();
        self.connector.clear();
        self.name.clear();
        self.server_id = 0;
        self.ts_sec = 0;
        self.gtid.clear();
        self.file.clear();
        self.pos = 0;
        self.row = 0;
        self.snapshot = false;
        self.thread = 0;
        self.db.clear();
        self.table.clear();
        self.query.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Connector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Connector {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub tcph_tcph_lineitem_value: ::protobuf::SingularPtrField<Value>,
    pub source: ::protobuf::SingularPtrField<Connector>,
    pub op: ::std::string::String,
    pub ts_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record {
    fn default() -> &'a Record {
        <Record as ::protobuf::Message>::default_instance()
    }
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // .bench.Value tcph_tcph_lineitem_value = 1;


    pub fn get_tcph_tcph_lineitem_value(&self) -> &Value {
        self.tcph_tcph_lineitem_value.as_ref().unwrap_or_else(|| Value::default_instance())
    }
    pub fn clear_tcph_tcph_lineitem_value(&mut self) {
        self.tcph_tcph_lineitem_value.clear();
    }

    pub fn has_tcph_tcph_lineitem_value(&self) -> bool {
        self.tcph_tcph_lineitem_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tcph_tcph_lineitem_value(&mut self, v: Value) {
        self.tcph_tcph_lineitem_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tcph_tcph_lineitem_value(&mut self) -> &mut Value {
        if self.tcph_tcph_lineitem_value.is_none() {
            self.tcph_tcph_lineitem_value.set_default();
        }
        self.tcph_tcph_lineitem_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_tcph_tcph_lineitem_value(&mut self) -> Value {
        self.tcph_tcph_lineitem_value.take().unwrap_or_else(|| Value::new())
    }

    // .bench.Connector source = 2;


    pub fn get_source(&self) -> &Connector {
        self.source.as_ref().unwrap_or_else(|| Connector::default_instance())
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: Connector) {
        self.source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut Connector {
        if self.source.is_none() {
            self.source.set_default();
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> Connector {
        self.source.take().unwrap_or_else(|| Connector::new())
    }

    // string op = 3;


    pub fn get_op(&self) -> &str {
        &self.op
    }
    pub fn clear_op(&mut self) {
        self.op.clear();
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ::std::string::String) {
        self.op = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op(&mut self) -> &mut ::std::string::String {
        &mut self.op
    }

    // Take field
    pub fn take_op(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.op, ::std::string::String::new())
    }

    // int64 ts_ms = 4;


    pub fn get_ts_ms(&self) -> i64 {
        self.ts_ms
    }
    pub fn clear_ts_ms(&mut self) {
        self.ts_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_ts_ms(&mut self, v: i64) {
        self.ts_ms = v;
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        for v in &self.tcph_tcph_lineitem_value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tcph_tcph_lineitem_value)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.op)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ts_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tcph_tcph_lineitem_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.op.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.op);
        }
        if self.ts_ms != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ts_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tcph_tcph_lineitem_value.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.source.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.op.is_empty() {
            os.write_string(3, &self.op)?;
        }
        if self.ts_ms != 0 {
            os.write_int64(4, self.ts_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Value>>(
                    "tcph_tcph_lineitem_value",
                    |m: &Record| { &m.tcph_tcph_lineitem_value },
                    |m: &mut Record| { &mut m.tcph_tcph_lineitem_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Connector>>(
                    "source",
                    |m: &Record| { &m.source },
                    |m: &mut Record| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "op",
                    |m: &Record| { &m.op },
                    |m: &mut Record| { &mut m.op },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ts_ms",
                    |m: &Record| { &m.ts_ms },
                    |m: &mut Record| { &mut m.ts_ms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Record>(
                    "Record",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Record {
        static mut instance: ::protobuf::lazy::Lazy<Record> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Record,
        };
        unsafe {
            instance.get(Record::new)
        }
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.tcph_tcph_lineitem_value.clear();
        self.source.clear();
        self.op.clear();
        self.ts_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18testdata/benchmark.proto\x12\x05bench\"\x8f\x04\n\x05Value\x12\x1d\
    \n\nl_orderkey\x18\x01\x20\x01(\x05R\tlOrderkey\x12\x1b\n\tl_partkey\x18\
    \x02\x20\x01(\x05R\x08lPartkey\x12\x1b\n\tl_suppkey\x18\x03\x20\x01(\x05\
    R\x08lSuppkey\x12!\n\x0cl_linenumber\x18\x04\x20\x01(\x05R\x0blLinenumbe\
    r\x12\x1d\n\nl_quantity\x18\x05\x20\x01(\x01R\tlQuantity\x12'\n\x0fl_ext\
    endedprice\x18\x06\x20\x01(\x01R\x0elExtendedprice\x12\x1d\n\nl_discount\
    \x18\x07\x20\x01(\x01R\tlDiscount\x12\x13\n\x05l_tax\x18\x08\x20\x01(\
    \x01R\x04lTax\x12!\n\x0cl_returnflag\x18\t\x20\x01(\tR\x0blReturnflag\
    \x12!\n\x0cl_linestatus\x18\n\x20\x01(\tR\x0blLinestatus\x12\x1d\n\nl_sh\
    ipdate\x18\x0b\x20\x01(\x05R\tlShipdate\x12!\n\x0cl_commitdate\x18\x0c\
    \x20\x01(\x05R\x0blCommitdate\x12#\n\rl_receiptdate\x18\r\x20\x01(\x05R\
    \x0clReceiptdate\x12%\n\x0el_shipinstruct\x18\x0e\x20\x01(\tR\rlShipinst\
    ruct\x12\x1d\n\nl_shipmode\x18\x0f\x20\x01(\tR\tlShipmode\x12\x1b\n\tl_c\
    omment\x18\x10\x20\x01(\tR\x08lComment\"\xc7\x02\n\tConnector\x12\x18\n\
    \x07version\x18\x01\x20\x01(\tR\x07version\x12\x1c\n\tconnector\x18\x02\
    \x20\x01(\tR\tconnector\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\
    \x12\x1b\n\tserver_id\x18\x04\x20\x01(\x03R\x08serverId\x12\x15\n\x06ts_\
    sec\x18\x05\x20\x01(\x03R\x05tsSec\x12\x12\n\x04gtid\x18\x06\x20\x01(\tR\
    \x04gtid\x12\x12\n\x04file\x18\x07\x20\x01(\tR\x04file\x12\x10\n\x03pos\
    \x18\x08\x20\x01(\x03R\x03pos\x12\x10\n\x03row\x18\t\x20\x01(\x03R\x03ro\
    w\x12\x1a\n\x08snapshot\x18\n\x20\x01(\x08R\x08snapshot\x12\x16\n\x06thr\
    ead\x18\x0b\x20\x01(\x03R\x06thread\x12\x0e\n\x02db\x18\x0c\x20\x01(\tR\
    \x02db\x12\x14\n\x05table\x18\r\x20\x01(\tR\x05table\x12\x14\n\x05query\
    \x18\x0e\x20\x01(\tR\x05query\"\x9e\x01\n\x06Record\x12E\n\x18tcph_tcph_\
    lineitem_value\x18\x01\x20\x01(\x0b2\x0c.bench.ValueR\x15tcphTcphLineite\
    mValue\x12(\n\x06source\x18\x02\x20\x01(\x0b2\x10.bench.ConnectorR\x06so\
    urce\x12\x0e\n\x02op\x18\x03\x20\x01(\tR\x02op\x12\x13\n\x05ts_ms\x18\
    \x04\x20\x01(\x03R\x04tsMsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
